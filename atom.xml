<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X</title>
  
  
  <link href="http://xiaojp.dpdns.org/atom.xml" rel="self"/>
  
  <link href="http://xiaojp.dpdns.org/"/>
  <updated>2025-06-26T07:01:36.848Z</updated>
  <id>http://xiaojp.dpdns.org/</id>
  
  <author>
    <name>X</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习入门教程：构建简单分类器</title>
    <link href="http://xiaojp.dpdns.org/post002"/>
    <id>http://xiaojp.dpdns.org/post002</id>
    <published>2025-06-26T06:56:01.081Z</published>
    <updated>2025-06-26T07:01:36.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习入门教程：构建简单分类器"><a href="#机器学习入门教程：构建简单分类器" class="headerlink" title="机器学习入门教程：构建简单分类器"></a>机器学习入门教程：构建简单分类器</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>机器学习是人工智能领域的重要分支，能够使计算机从数据中自动学习并做出决策。本文将带你一步步构建一个简单的分类器，帮助你理解机器学习的基本流程和核心概念。</p><h2 id="一、机器学习基础概念"><a href="#一、机器学习基础概念" class="headerlink" title="一、机器学习基础概念"></a>一、机器学习基础概念</h2><h3 id="1-什么是机器学习"><a href="#1-什么是机器学习" class="headerlink" title="1. 什么是机器学习"></a>1. 什么是机器学习</h3><p>机器学习是通过算法让计算机从大量数据中学习规律，从而对新数据进行预测或分类。它包括监督学习、无监督学习和强化学习三大类型。</p><h3 id="2-分类器简介"><a href="#2-分类器简介" class="headerlink" title="2. 分类器简介"></a>2. 分类器简介</h3><p>分类器是一种监督学习模型，用于根据输入数据将样本划分到预定义的类别中。例如，判断一封邮件是“垃圾邮件”还是“正常邮件”。</p><h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><h3 id="1-安装Python及相关库"><a href="#1-安装Python及相关库" class="headerlink" title="1. 安装Python及相关库"></a>1. 安装Python及相关库</h3><p>确保已经安装Python。推荐使用Python 3.7及以上版本。<br>安装必要库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy scikit-learn matplotlib</span><br></pre></td></tr></table></figure><h3 id="2-导入所需包"><a href="#2-导入所需包" class="headerlink" title="2. 导入所需包"></a>2. 导入所需包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, classification_report</span><br></pre></td></tr></table></figure><h2 id="三、数据准备与探索"><a href="#三、数据准备与探索" class="headerlink" title="三、数据准备与探索"></a>三、数据准备与探索</h2><h3 id="1-加载数据集"><a href="#1-加载数据集" class="headerlink" title="1. 加载数据集"></a>1. 加载数据集</h3><p>本文使用经典的鸢尾花（Iris）数据集，包含150条样本，分为3个类别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br></pre></td></tr></table></figure><h3 id="2-数据集划分"><a href="#2-数据集划分" class="headerlink" title="2. 数据集划分"></a>2. 数据集划分</h3><p>将数据集分为训练集和测试集，比例为70%训练，30%测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">42</span>)</span><br></pre></td></tr></table></figure><h3 id="3-简单数据探索"><a href="#3-简单数据探索" class="headerlink" title="3. 简单数据探索"></a>3. 简单数据探索</h3><p>打印数据维度和类别分布：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集样本数:&quot;</span>, X_train.shape[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试集样本数:&quot;</span>, X_test.shape[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类别标签:&quot;</span>, np.unique(y))</span><br></pre></td></tr></table></figure><h2 id="四、模型训练"><a href="#四、模型训练" class="headerlink" title="四、模型训练"></a>四、模型训练</h2><h3 id="1-选择模型"><a href="#1-选择模型" class="headerlink" title="1. 选择模型"></a>1. 选择模型</h3><p>本文采用逻辑回归（Logistic Regression）作为分类器，适合多分类问题且简单易用。</p><h3 id="2-训练模型"><a href="#2-训练模型" class="headerlink" title="2. 训练模型"></a>2. 训练模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = LogisticRegression(max_iter=<span class="number">200</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><h2 id="五、模型评估"><a href="#五、模型评估" class="headerlink" title="五、模型评估"></a>五、模型评估</h2><h3 id="1-预测测试集"><a href="#1-预测测试集" class="headerlink" title="1. 预测测试集"></a>1. 预测测试集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_pred = model.predict(X_test)</span><br></pre></td></tr></table></figure><h3 id="2-计算准确率"><a href="#2-计算准确率" class="headerlink" title="2. 计算准确率"></a>2. 计算准确率</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;模型准确率: <span class="subst">&#123;accuracy:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-输出分类报告"><a href="#3-输出分类报告" class="headerlink" title="3. 输出分类报告"></a>3. 输出分类报告</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred, target_names=iris.target_names))</span><br></pre></td></tr></table></figure><h2 id="六、结果可视化（）"><a href="#六、结果可视化（）" class="headerlink" title="六、结果可视化（）"></a>六、结果可视化（）</h2><p>为了直观展示分类结果，可以绘制二维散点图（以前两个特征为例）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> i, color, label <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">3</span>), [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>], iris.target_names):</span><br><span class="line">    plt.scatter(X_test[y_test==i, <span class="number">0</span>], X_test[y_test==i, <span class="number">1</span>], color=color, label=label)</span><br><span class="line">plt.xlabel(iris.feature_names[<span class="number">0</span>])</span><br><span class="line">plt.ylabel(iris.feature_names[<span class="number">1</span>])</span><br><span class="line">plt.title(<span class="string">&quot;测试集分类散点图&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://blogsource.dpdns.org/blogimg/main/img1/202506261454208.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文通过鸢尾花数据集示范了机器学习中构建分类器的基本流程，包括数据准备、模型训练和评估。逻辑回归模型简单且效果不错，适合初学者入门。后续可以尝试其它算法（如决策树、支持向量机等）以及更复杂的数据集，深入提升机器学习技能。</p><p>希望这篇教程能帮助你迈出机器学习的第一步！如果有问题或想了解更深入的内容，欢迎留言交流。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;机器学习入门教程：构建简单分类器&quot;&gt;&lt;a href=&quot;#机器学习入门教程：构建简单分类器&quot; class=&quot;headerlink&quot; title=&quot;机器学习入门教程：构建简单分类器&quot;&gt;&lt;/a&gt;机器学习入门教程：构建简单分类器&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="技术教程" scheme="http://xiaojp.dpdns.org/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="机器学习" scheme="http://xiaojp.dpdns.org/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://xiaojp.dpdns.org/tags/Python/"/>
    
    <category term="分类器" scheme="http://xiaojp.dpdns.org/tags/%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    
    <category term="教程" scheme="http://xiaojp.dpdns.org/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://xiaojp.dpdns.org/2025/05/26/Test/"/>
    <id>http://xiaojp.dpdns.org/2025/05/26/Test/</id>
    <published>2025-05-26T10:47:20.000Z</published>
    <updated>2025-05-26T10:49:40.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="first-blog"><a href="#first-blog" class="headerlink" title="first blog"></a>first blog</h2><p>hello world!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;first-blog&quot;&gt;&lt;a href=&quot;#first-blog&quot; class=&quot;headerlink&quot; title=&quot;first blog&quot;&gt;&lt;/a&gt;first blog&lt;/h2&gt;&lt;p&gt;hello world!&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis 中的缓存击穿、缓存穿透和缓存雪崩是什么？</title>
    <link href="http://xiaojp.dpdns.org/post001"/>
    <id>http://xiaojp.dpdns.org/post001</id>
    <published>2025-05-26T10:34:19.897Z</published>
    <updated>2025-06-26T08:43:20.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>**缓存击穿：**指某个热点数据在缓存中失效，导致大量请求直接访问数据库。此时，由于瞬间的高并发，可能导致数据库崩溃。</p><p>**缓存穿透：**指查询一个不存在的数据，缓存中没有相应的记录，每次请求都会去数据库查询，造成数据库负担加重。</p><p>**缓存雪崩：**指多个缓存数据在同一时间过期，导致大量请求同时访问数据库，从而造成数据库瞬间负载激增。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>缓存击穿：</strong></p><ul><li>使用互斥锁，确保同一时间只有一个请求可以去数据库查询并更新缓存。</li><li>热点数据永不过期。</li></ul><p><strong>缓存穿透：</strong></p><ul><li>使用布隆过滤器，过滤掉不存在的请求，避免直接访问数据库。</li><li>对查询结果进行缓存，即使是不存在的数据，也可以缓存一个标识，以减少对数据库的请求。</li></ul><p><strong>缓存雪崩：</strong></p><ul><li>采用随机过期时间策略，避免多个数据同时过期。</li><li>使用双缓存策略，将数据同时存储在两层缓存中，减少数据库直接请求。</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="缓存雪崩解析"><a href="#缓存雪崩解析" class="headerlink" title="缓存雪崩解析"></a>缓存雪崩解析</h3><p><img src="https://blogsource.dpdns.org/blogimg/main/img1/20250601203736.png"></p><p>缓存雪崩是指在某个时间点，大量缓存同时失效或被清空，导致大量请求直接打到数据库或后端系统，造成系统负载激增，甚至引发系统崩溃。</p><p>这通常是由于缓存中的大量数据在同一时间失效引起的。</p><p>想象一个电商系统，用户量很大，假设某一系列的商品缓存突然同一时间失效，那就会造成我们的缓存雪崩，导致服务全部打到了数据库，引发严重后果。<br><strong>解决办法</strong></p><p>缓存键同时失效：</p><p>1.过期时间随机化：设置缓存的过期时间，加上一个随机值，避免同一时间大量缓存失效。</p><p>2.使用多级缓存：引入多级缓存机制，如本地缓存和分布式缓存相结合，减少单点故障风险。</p><p>3.缓存预热：系统启动时提前加载缓存数据，避免大量请求落到冷启动状态下的数据库。</p><p>4.加互斥锁：使得没缓存或缓存失效的情况下，同一时间只有一个请求来构建缓存，防止数据库压力过大。</p><p>缓存中间件故障：</p><p>1.服务熔断：暂停业务的返回数据，直接返回错误。</p><p>2.构建集群：构建多个 Redis 集群保证其高可用。</p><h3 id="缓存击穿解析"><a href="#缓存击穿解析" class="headerlink" title="缓存击穿解析"></a>缓存击穿解析</h3><p><img src="https://blogsource.dpdns.org/blogimg/main/img1/202506012038210.png"></p><p>缓存击穿指的是某一热点数据缓存失效，使得大量请求直接打到了数据库，增加数据库负载。</p><p>想象一下大家都在抢茅台，但在某一时刻茅台的缓存失效了，大家的请求打到了数据库中，这就是缓存击穿。</p><p>缓存雪崩是多个 key，大量数据同时过期，而缓存击穿是某个热点 key 崩溃，可以认为缓存击穿是缓存雪崩的子集。</p><p><strong>解决办法</strong> 1.加互斥锁：保证同一时间只有一个请求来构建缓存，跟缓存雪崩相同。</p><p>2.热点数据永不过期：不要给热点数据设置过期时间，在后台异步更新缓存。</p><h3 id="缓存穿透解析"><a href="#缓存穿透解析" class="headerlink" title="缓存穿透解析"></a>缓存穿透解析</h3><p><img src="https://blogsource.dpdns.org/blogimg/main/img1/202506012039873.png"></p><p>缓存穿透是指查询一个不存在的数据，由于缓存中肯定不存在，导致每次请求都直接访问数据库，增加数据库负载。</p><p>攻击者可以通过构造不存在的 key 发起大量请求，对数据库造成很大的压力，可能会造成系统宕机。</p><p><strong>解决办法</strong> 1.防止非法请求：检查非法请求，封禁其 IP 以及账号，防止它再次为非作歹。</p><p>2.缓存空值：将数据库中不存在的结果（例如空值）也缓存起来，并设置一个较短的过期时间，避免频繁查询数据库。</p><p>3.使用布隆过滤器：使用布隆过滤器来快速判断一个请求的数据是否存在，如果布隆过滤器判断数据不存在，则直接返回，避免查询数据库。</p><h3 id="互斥锁实现示例（Java）"><a href="#互斥锁实现示例（Java）" class="headerlink" title="互斥锁实现示例（Java）"></a>互斥锁实现示例（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 尝试从缓存获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果缓存不存在</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 加锁以防止并发请求</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 再次检查缓存，避免重复查询</span></span><br><span class="line">                value = jedis.get(key);</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    value = queryDatabase(key);</span><br><span class="line">                    <span class="comment">// 将结果放入缓存</span></span><br><span class="line">                    jedis.set(key, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.**缓存查询：**首先尝试从 Redis 中获取数据。</p><p>2.**加锁：**如果缓存中没有数据，使用 ReentrantLock 加锁，确保只有一个线程可以查询数据库。</p><p>3.**二次检查：**在加锁后再次检查缓存，避免重复查询。</p><p>4.**数据库查询：**如果缓存仍然没有数据，查询数据库并将结果存入缓存。</p><p>5.**释放锁：**确保锁在查询结束后被释放，以防止死锁。</p><p>这种方式有效地防止了缓存击穿，因为即使在高并发的情况下，只有一个请求会去数据库查询数据，其他请求则会等待锁释放。如果后端是多实例部署，一般实例数量也不多，即使使用本地锁也行，因为并发也不高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;**缓存击穿：**指某个热点数据在缓存中失效，导致大量请求直接访问数据库。此时，由于瞬间的高并发，可能导致数据库崩溃。&lt;/p&gt;
&lt;p&gt;**缓</summary>
      
    
    
    
    <category term="后端开发" scheme="http://xiaojp.dpdns.org/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Redis" scheme="http://xiaojp.dpdns.org/tags/Redis/"/>
    
  </entry>
  
</feed>
